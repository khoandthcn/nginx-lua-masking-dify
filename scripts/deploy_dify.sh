#!/bin/bash

# Dify v0.15.8 Masking Plugin Deployment Script
# Author: Manus AI
# Version: 1.0.0

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PLUGIN_DIR="/opt/nginx-lua-masking"
NGINX_CONF_DIR="/etc/nginx/conf.d"
DIFY_BACKEND="127.0.0.1:5001"
DOMAIN="localhost"

# Functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_requirements() {
    log_info "Checking requirements..."
    
    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root"
        exit 1
    fi
    
    # Check Nginx with Lua support
    if ! nginx -V 2>&1 | grep -q "lua"; then
        log_error "Nginx with Lua support is required"
        log_info "Please install OpenResty or compile Nginx with lua-resty-core"
        exit 1
    fi
    
    # Check Lua version
    if ! lua -v 2>/dev/null | grep -q "5\.[123]"; then
        log_error "Lua 5.1, 5.2, or 5.3 is required"
        exit 1
    fi
    
    log_success "Requirements check passed"
}

install_plugin() {
    log_info "Installing Dify masking plugin..."
    
    # Create plugin directory
    mkdir -p "$PLUGIN_DIR"
    
    # Copy plugin files
    cp -r lib/ "$PLUGIN_DIR/"
    cp -r config/ "$PLUGIN_DIR/"
    cp -r examples/ "$PLUGIN_DIR/"
    
    # Set permissions
    chown -R nginx:nginx "$PLUGIN_DIR" 2>/dev/null || chown -R www-data:www-data "$PLUGIN_DIR"
    chmod -R 755 "$PLUGIN_DIR"
    
    log_success "Plugin files installed to $PLUGIN_DIR"
}

configure_nginx() {
    log_info "Configuring Nginx for Dify integration..."
    
    # Backup existing configuration
    if [[ -f "$NGINX_CONF_DIR/dify-masking.conf" ]]; then
        cp "$NGINX_CONF_DIR/dify-masking.conf" "$NGINX_CONF_DIR/dify-masking.conf.backup.$(date +%Y%m%d_%H%M%S)"
        log_info "Backed up existing configuration"
    fi
    
    # Generate Nginx configuration
    cat > "$NGINX_CONF_DIR/dify-masking.conf" << EOF
# Dify v0.15.8 Masking Plugin Configuration
# Generated by deployment script

lua_shared_dict masking_mappings 10m;
lua_shared_dict masking_stats 1m;
lua_package_path "$PLUGIN_DIR/lib/?.lua;$PLUGIN_DIR/?.lua;;";

init_by_lua_block {
    local dify_adapter = require("lib.dify_adapter")
    
    -- Load configuration
    local config_file = io.open("$PLUGIN_DIR/config/dify_config.json", "r")
    if not config_file then
        ngx.log(ngx.ERR, "Cannot open dify_config.json")
        return
    end
    
    local config_json = config_file:read("*all")
    config_file:close()
    
    -- Basic JSON parsing for configuration
    local config = {
        patterns = {
            email = { enabled = true, regex = "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z][a-zA-Z]+", placeholder_prefix = "EMAIL" },
            ipv4 = { enabled = true, regex = "\\\\b(?:[0-9]{1,3}\\\\.){3}[0-9]{1,3}\\\\b", placeholder_prefix = "IP" },
            organizations = { enabled = true, static_list = {"Google", "Microsoft", "Amazon", "Facebook", "Apple"}, placeholder_prefix = "ORG" }
        }
    }
    
    _G.dify_masking_adapter = dify_adapter.new(config)
    ngx.log(ngx.INFO, "Dify masking adapter initialized")
}

upstream dify_backend {
    server $DIFY_BACKEND;
    keepalive 32;
}

server {
    listen 80;
    server_name $DOMAIN;
    
    client_max_body_size 10M;
    proxy_buffering off;
    proxy_request_buffering off;
    
    location ~ ^/v1/(chat-messages|completion-messages|messages) {
        access_by_lua_block {
            local adapter = _G.dify_masking_adapter
            if not adapter then return end
            
            local uri = ngx.var.uri
            local method = ngx.var.request_method
            local content_type = ngx.var.content_type or ""
            
            ngx.req.read_body()
            local body = ngx.req.get_body_data()
            
            if body then
                local processed_body, modified = adapter:process_request(uri, method, body, content_type)
                if modified then
                    ngx.req.set_body_data(processed_body)
                end
            end
        }
        
        proxy_pass http://dify_backend;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header Connection "";
        proxy_http_version 1.1;
        
        body_filter_by_lua_block {
            local adapter = _G.dify_masking_adapter
            if not adapter then return end
            
            local uri = ngx.var.uri
            local method = ngx.var.request_method
            local chunk = ngx.arg[1]
            local is_last = ngx.arg[2]
            
            if chunk and #chunk > 0 then
                local content_type = ngx.header.content_type or ""
                
                if is_last then
                    local processed_chunk = adapter:process_response(uri, method, chunk, content_type)
                    ngx.arg[1] = processed_chunk
                end
            end
        }
    }
    
    location /masking/health {
        access_by_lua_block {
            local adapter = _G.dify_masking_adapter
            if adapter then
                local health = adapter:health_check()
                ngx.header.content_type = "application/json"
                ngx.say('{"status":"' .. health.status .. '","dify_version":"' .. health.dify_version .. '"}')
            else
                ngx.status = 503
                ngx.say('{"status":"error","message":"Adapter not initialized"}')
            end
            ngx.exit(ngx.HTTP_OK)
        }
    }
    
    location / {
        proxy_pass http://dify_backend;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF
    
    log_success "Nginx configuration created"
}

test_configuration() {
    log_info "Testing Nginx configuration..."
    
    if nginx -t; then
        log_success "Nginx configuration test passed"
    else
        log_error "Nginx configuration test failed"
        exit 1
    fi
}

start_services() {
    log_info "Starting/reloading Nginx..."
    
    if systemctl is-active --quiet nginx; then
        systemctl reload nginx
        log_success "Nginx reloaded"
    else
        systemctl start nginx
        log_success "Nginx started"
    fi
}

run_health_check() {
    log_info "Running health check..."
    
    sleep 2
    
    if curl -s "http://$DOMAIN/masking/health" | grep -q "healthy\|degraded"; then
        log_success "Health check passed - masking plugin is running"
    else
        log_warning "Health check failed - plugin may not be working correctly"
    fi
}

show_usage() {
    cat << EOF
Dify v0.15.8 Masking Plugin Deployment

Usage: $0 [OPTIONS]

Options:
    -d, --domain DOMAIN     Set domain name (default: localhost)
    -b, --backend BACKEND   Set Dify backend address (default: 127.0.0.1:5001)
    -p, --plugin-dir DIR    Set plugin installation directory (default: /opt/nginx-lua-masking)
    -h, --help             Show this help message

Examples:
    $0                                          # Deploy with defaults
    $0 -d dify.example.com -b 10.0.0.100:5001 # Deploy with custom domain and backend
    
After deployment, test the masking:
    curl -X POST http://$DOMAIN/v1/chat-messages \\
         -H "Content-Type: application/json" \\
         -d '{"query": "My email is test@example.com"}'

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -d|--domain)
            DOMAIN="$2"
            shift 2
            ;;
        -b|--backend)
            DIFY_BACKEND="$2"
            shift 2
            ;;
        -p|--plugin-dir)
            PLUGIN_DIR="$2"
            shift 2
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Main deployment process
main() {
    log_info "Starting Dify v0.15.8 Masking Plugin deployment..."
    log_info "Domain: $DOMAIN"
    log_info "Backend: $DIFY_BACKEND"
    log_info "Plugin directory: $PLUGIN_DIR"
    echo
    
    check_requirements
    install_plugin
    configure_nginx
    test_configuration
    start_services
    run_health_check
    
    echo
    log_success "Deployment completed successfully!"
    log_info "Health check: http://$DOMAIN/masking/health"
    log_info "Statistics: http://$DOMAIN/masking/stats"
    echo
    log_info "Test masking with:"
    echo "curl -X POST http://$DOMAIN/v1/chat-messages \\"
    echo "     -H \"Content-Type: application/json\" \\"
    echo "     -d '{\"query\": \"My email is test@example.com\"}'"
}

# Run main function
main "$@"

