# Nginx configuration for Dify v0.15.8 with Lua Masking Plugin
# Place this configuration in your Nginx conf.d directory

# Lua shared dictionaries for masking plugin
lua_shared_dict masking_mappings 10m;
lua_shared_dict masking_stats 1m;

# Lua package path
lua_package_path "/path/to/nginx-lua-masking/lib/?.lua;/path/to/nginx-lua-masking/?.lua;;";

# Initialize masking plugin
init_by_lua_block {
    -- Load the Dify adapter
    local dify_adapter = require("lib.dify_adapter")
    
    -- Load configuration
    local config_file = io.open("/path/to/nginx-lua-masking/config/dify_config.json", "r")
    local config_json = config_file:read("*all")
    config_file:close()
    
    -- Parse configuration (basic JSON parsing)
    local config = loadstring("return " .. config_json:gsub('"([^"]*)":', '["%1"]='):gsub('"([^"]*)"', '"%1"'))()
    
    -- Create global adapter instance
    _G.dify_masking_adapter = dify_adapter.new(config)
    
    ngx.log(ngx.INFO, "Dify masking adapter initialized successfully")
}

# Upstream for Dify backend
upstream dify_backend {
    server 127.0.0.1:5001;  # Adjust to your Dify backend address
    keepalive 32;
}

server {
    listen 80;
    server_name your-dify-domain.com;  # Replace with your domain
    
    # Increase body size for large payloads
    client_max_body_size 10M;
    
    # Buffer settings for streaming
    proxy_buffering off;
    proxy_request_buffering off;
    
    # Dify API endpoints with masking
    location ~ ^/v1/(chat-messages|completion-messages|messages) {
        # Access phase - process request
        access_by_lua_block {
            local adapter = _G.dify_masking_adapter
            if not adapter then
                ngx.log(ngx.ERR, "Dify masking adapter not initialized")
                return
            end
            
            -- Get request info
            local uri = ngx.var.uri
            local method = ngx.var.request_method
            local content_type = ngx.var.content_type or ""
            
            -- Read request body
            ngx.req.read_body()
            local body = ngx.req.get_body_data()
            
            if body then
                -- Process request with masking
                local processed_body, modified = adapter:process_request(uri, method, body, content_type)
                
                if modified then
                    -- Set the modified body
                    ngx.req.set_body_data(processed_body)
                    ngx.log(ngx.INFO, "Request body masked for " .. uri)
                end
            end
        }
        
        # Proxy to Dify backend
        proxy_pass http://dify_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Headers for streaming
        proxy_set_header Connection "";
        proxy_http_version 1.1;
        
        # Body filter phase - process response
        body_filter_by_lua_block {
            local adapter = _G.dify_masking_adapter
            if not adapter then
                return
            end
            
            local uri = ngx.var.uri
            local method = ngx.var.request_method
            local chunk = ngx.arg[1]
            local is_last = ngx.arg[2]
            
            if chunk and #chunk > 0 then
                -- Check if this is a streaming response
                local content_type = ngx.header.content_type or ""
                
                if content_type:match("text/event%-stream") or content_type:match("application/stream") then
                    -- Process streaming chunk
                    local processed_chunk = adapter:process_response_chunk(uri, method, chunk, is_last)
                    ngx.arg[1] = processed_chunk
                else
                    -- Accumulate non-streaming response
                    local ctx = ngx.ctx
                    if not ctx.response_body then
                        ctx.response_body = ""
                    end
                    ctx.response_body = ctx.response_body .. chunk
                    
                    if is_last then
                        -- Process complete response
                        local processed_body = adapter:process_response(uri, method, ctx.response_body, content_type)
                        ngx.arg[1] = processed_body
                        ctx.response_body = nil
                    else
                        ngx.arg[1] = ""  -- Don't output partial chunks
                    end
                end
            end
        }
    }
    
    # Health check endpoint
    location /masking/health {
        access_by_lua_block {
            local adapter = _G.dify_masking_adapter
            if adapter then
                local health = adapter:health_check()
                ngx.header.content_type = "application/json"
                ngx.say(require("lib.utils").json.encode(health))
            else
                ngx.status = 503
                ngx.say('{"status": "error", "message": "Adapter not initialized"}')
            end
            ngx.exit(ngx.HTTP_OK)
        }
    }
    
    # Statistics endpoint
    location /masking/stats {
        access_by_lua_block {
            local adapter = _G.dify_masking_adapter
            if adapter then
                local stats = adapter:get_dify_statistics()
                ngx.header.content_type = "application/json"
                ngx.say(require("lib.utils").json.encode(stats))
            else
                ngx.status = 503
                ngx.say('{"status": "error", "message": "Adapter not initialized"}')
            end
            ngx.exit(ngx.HTTP_OK)
        }
    }
    
    # Proxy other requests without masking
    location / {
        proxy_pass http://dify_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Error pages
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# HTTPS server (optional)
server {
    listen 443 ssl http2;
    server_name your-dify-domain.com;
    
    # SSL configuration
    ssl_certificate /path/to/your/cert.pem;
    ssl_certificate_key /path/to/your/key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    
    # Same configuration as HTTP server
    client_max_body_size 10M;
    proxy_buffering off;
    proxy_request_buffering off;
    
    # Include the same location blocks as above
    # ... (copy location blocks from HTTP server)
}

